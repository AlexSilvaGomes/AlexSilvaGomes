1. When is assigned a safe list to a unsafe list like this ->
 List<String> list1 = new ArrayList<String>();
 List list2 = list1;
 you can do this -> list2.add(new Integer(0));  it will work, but as we can see it's too dangerous. so 
 watch out to code like this one.
 
2. Pay attention to when using a list like this List<? extends Something> you cannot add to the collection.
 
3. Remember that exclusive and inclusive regarding NavigableMap/Set return the start/end point if it's true or false 
 and when not specified this exclusive/inclusive flag it returns a SortedSet.  
 
4. Any line After a code like that -> for(;;);  you will get a compilation error,
  because this code will be unreachable
  
5. Downcast works just when you have a chance that this object could be of the expected type 
 otherwise you get a ClassNotFoundException
 Ex: if you gotta a Dog within an Animal reference you can downcast without problem dog=(Dog)animal (implicit downcast)
 however if you gotta an animal object within an animal reference you can't downcast , because Dog cannot handle 
 an Animal
 
6. watch out for regex code like that ' . ' this token represents any character that is gonna be put in the Pattern.Macher
 
7. List lst2=new Vector<String>(); in this case the generic type is correct we don't even get 
 a warning return ,the opposite is false, in other words when we specify the reference but no the object,
  we get warning on the compilation.
  
8. The keyword "synchronized" can be used with any access modifier (except abstract).
 
9. Pay attention to this , when we declare two methods receiving varargs as arguments, ex. (int... i) and (Integer... i)
  the statement which will call it will have an ambiguous error , unless it has another method to define the call.
  besides that a varargs(int... i) and array(int[] i) are meaningfully so it leads to a compile error
  @see class Gened to review.
  
10. Do not forget it is quite possible to synchronize on this synchronized("x") get from string poll.
  
11. String builder and string buffer there is no concat method watch out 
  
12. When using -cp in order to compile from shell, remember we gotta put [name.jar] 
  when the resource come from a jar file.
  
13. pay attention to the reserved words in java: goto const although not used anymore.
  
14. Inner classes cannot have static declarations watch out this.

15. Pay close attention , the only wrapper which don't take a string in its valueOf method is the Character 
it only receive a char , like this  Character.valueOf(char)

16. regarding scanner ex: hasNextLog() what separate this type of data are spaces so if you have
1 2 A B 3, it will result in a  1 2 , because 3 after A and B are ignored.

17. Just to remember RuntimeException is a sub exception(child) of Exception and if I declare a try catch 
like that try{ }catch(Exception e){} I don't need necessarily throw a exception in the try scope.

18. Another point to take note about printf , if you put a %b in a number index like that "%b,123" 
the result would be true.

19. Ways to suggest gc: Runtime.getRuntime().gc(); and System.gc(); -> this one  is a static method.

20. you gotta bear in mind that throwable is a checked exception.

21. this statment leads to a compile error String s = new String(null); because the string class has two versions of overloaded
constructor becoming ambiguous which one to call.
 

 