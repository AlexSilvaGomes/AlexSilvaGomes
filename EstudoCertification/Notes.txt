1. When is assigned a safe list to a unsafe list like this ->
 List<String> list1 = new ArrayList<String>();
 List list2 = list1;
 you can do this -> list2.add(new Integer(0));  it will work, but as we can see it's too dangerous. so 
 watch out to code like this one.
 
2. Pay attention to when using a list like this List<? extends Something> you cannot add to the collection.
 
3. Remember that exclusive and inclusive regarding NavigableMap/Set return the start/end point if it's true or false 
 and when not specified this exclusive/inclusive flag it returns a SortedSet.  
 
4. Any line After a code like that -> for(;;);  you will get a compilation error,
  because this code will be unreachable
  
5. Downcast works just when you have a chance that this object could be of the expected type 
 otherwise you get a ClassNotFoundException
 Ex: if you gotta a Dog within an Animal reference you can downcast without problem dog=(Dog)animal (implicit downcast)
 however if you gotta an animal object within an animal reference you can't downcast , because Dog cannot handle 
 an Animal
 
6. watch out for regex code like that ' . ' this token represents any character that is gonna be put in the Pattern.Macher
 
7. List lst2=new Vector<String>(); in this case the generic type is correct we don't even get 
 a warning return ,the opposite is false, in other words when we specify the reference but no the object,
  we get warning on the compilation.
  
8. The keyword "synchronized" can be used with any access modifier (except abstract).
 
9. Pay attention to this , when we declare two methods receiving varargs as arguments, ex. (int... i) and (Integer... i)
  the statement which will call it will have an ambiguous error , unless it has another method to define the call.
  besides that a varargs(int... i) and array(int[] i) are meaningfully so it leads to a compile error
  @see class Gened to review.
  
10. Do not forget it is quite possible to synchronize on this synchronized("x") get from string poll.
  
11. String builder and string buffer there is no concat method watch out 
  
12. When using -cp in order to compile from shell, remember we gotta put [name.jar] 
  when the resource come from a jar file.
  
13. pay attention to the reserved words in java: goto const although not used anymore.
  
14. Inner classes cannot have static declarations watch out this.

15. Pay close attention , the only wrapper which don't take a string in its valueOf method is the Character 
it only receive a char , like this  Character.valueOf(char)

16. regarding scanner ex: hasNextLog() what separate this type of data are spaces so if you have
1 2 A B 3, it will result in a  1 2 , because 3 after A and B are ignored.

17. Just to remember RuntimeException is a sub exception(child) of Exception and if I declare a try catch 
like that try{ }catch(Exception e){} I don't need necessarily throw a exception in the try scope.

18. Another point to take note about printf , if you put a %b in a number index like that "%b,123" 
the result would be true.

19. Ways to suggest gc: Runtime.getRuntime().gc(); and System.gc(); -> this one  is a static method.

20. you gotta bear in mind that throwable is a checked exception.

21. this statment leads to a compile error String s = new String(null); because the string class has two versions of overloaded
constructor becoming ambiguous which one to call.

22. About printf or formatter classes , when I have a String s= "false"; and the following code
System.out.printf("%b",s);  the result is always true.

23, in the locale(String language) constructor pay attention to this the first argument is always 
the string language then the country if it's desired.

24.  the following methods are declared in both String and StringBuffer classes: charAt(),subString() and length();

25. When I use a Enum as constant in a case statement I have to specify just the Constant like this 
enum Letter{A,B,C }    ... case  A: //do something 

26. All subclass must implement methods of its abstract superclass but whether this subclass isn't abstract.

27. This abstract class must be implemented by the first concrete class. 

28. In case of an overloaded method which receive as parameter an object, what we have to consider in the called is the reference of the object passed as argument. Unlike overridden method which what determine the version(subclass or superclass) of the method to call is the object in runtime.

29. To declare an array, remember that if it's an unidimensional array the size of the array after the key new between the blankets is mandatory like this new int [2] 
but if it's a multidimensional array just the first size is necessary new int [4][] correct!

30. Pay attention to this syntax   public void anyMethod( List<? super Dog> animals) when you need to pass any type up dog and desire to use the sintaxe  animals.add(something), if you don't use this sintaxe the code doesn't compile.

31. A List like this List<?> can receive any type of list, different of a list of objects List<Object>. 

32. Pay attention to the token <T> that represent any type about generic.

33. Once a thread has been started, it can never be started again.

34. This declaration is legal Object [] object = new String[5][5]; it was tested!

35. This declaration will lead you to a compilation error System.out.println(PinSize.BIG > PinSize.BIGGERER); 

36. Maps can be iterated either by using the keyset or the entry set .

37. About threads, you can only synchronize on objects. 
Pay attention to what a method returns to understand if the code can synchronize on it or not.

38. About Methods Inner Classes.You must always instantiate a inner class that is within a method, after its declaration.

39. Pay close attention to this, when closing declarations of inner classes declared as parameter of a method  }); different from the normal one like };
Normal declaration ->
Obj o = new Class(){ void overridenMethod(){} };
as a parameter->  void method(new Obj(){ void overridenMethod(){ } });
I think you got it! :) 

40. Another Important point about static inner classes is that you have to create an instance of it, even being static, so you gotta do this -> InnerClass inner = new InnerClass(); from inside a static method or not.

41. Do not forget , concerning inner classes, to use a variable within a local-method inner class you gotta put final in its declaration
like this ->
final int i = 5; //  that way you can use in the local-method inner class. 
 
42. When using headSet , tailSet, subSet from navigableMap you have to keep the range while adding new elements otherwise you get a runtimeException -> IllegalArgumentException

43. native methods there is no body.  public void native method();

44. Interface methods are always abstract that's why you can't declare it as static, abstract and static does't match

45. watch out for the method Object.wait() throw a InterruptedException 

46. because the renameTo(-) method in java.io.File class takes only one (another) File instance[

47. About Printf and Formatter classes %[arg_index$][flags][width][.precision]conversion char

48. final variable must be initialized in its declaration line or in the costructor

49. Java.io class has its own implementation if equals method

50. When is used the flag < , > with a decimal < d > in the printf the number is formatted and using width 
from the number 7 it works , in other words a subtraction minus 6 is made.

51. Pattern local where you can store a jar for the application  Location: $[Java_Home]/jre/lib/ext/

52. You can cast between any two interfaces at **compile time**, even though they are not in the same hierarchy root.
For an example, following cast is valid at compile time:
Serializable i = null; // null or anything.    
Comparable cm=(Comparable)(Cloneable)(Iterable)(Runnable)i;

53. The combination "final volatile" is invalid.








 
